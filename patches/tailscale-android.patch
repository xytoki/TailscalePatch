diff --git a/cmd/tailscale/main.go b/cmd/tailscale/main.go
index 121f93a..77e45ca 100644
--- a/cmd/tailscale/main.go
+++ b/cmd/tailscale/main.go
@@ -38,6 +38,7 @@ import (
 	"tailscale.com/hostinfo"
 	"tailscale.com/ipn"
 	"tailscale.com/ipn/ipnlocal"
+	"tailscale.com/ipn/ipnstate"
 	"tailscale.com/net/dns"
 	"tailscale.com/net/interfaces"
 	"tailscale.com/net/netns"
@@ -151,6 +152,9 @@ type BackendState struct {
 	ExitStatus ExitStatus
 	// Exit is our current exit node, if any.
 	Exit Peer
+
+	Status         map[tailcfg.StableNodeID]*ipnstate.PeerStatus
+	StatusFetching bool
 }
 
 // UIEvent is an event flowing from the UI to the backend.
@@ -194,6 +198,7 @@ type (
 	WebAuthEvent                   struct{}
 	GoogleAuthEvent                struct{}
 	LogoutEvent                    struct{}
+	RefreshEvent                   struct{}
 	OSSLicensesEvent               struct{}
 	BeExitNodeEvent                bool
 	ExitAllowLANEvent              bool
@@ -402,6 +407,26 @@ func (a *App) runBackend() error {
 					alarm(a.notifyExpiry(service, m.Expiry))
 				}
 			}
+			if n.Engine != nil || n.NetMap != nil || n.State != nil {
+				if state.State == ipn.Running {
+					if !state.StatusFetching {
+						go func() {
+							state.StatusFetching = true
+							st := b.backend.Status()
+							peers := make(map[tailcfg.StableNodeID]*ipnstate.PeerStatus)
+							for _, p := range st.Peer {
+								peers[p.ID] = p
+							}
+							state.Status = peers
+							a.notify(state)
+							state.StatusFetching = false
+						}()
+					}
+				} else {
+					state.Status = make(map[tailcfg.StableNodeID]*ipnstate.PeerStatus)
+					a.notify(state)
+				}
+			}
 			// Notify if a previously online exit is not longer online (or missing).
 			if service != 0 && exitWasOnline && state.ExitStatus == ExitOffline {
 				a.pushNotify(service, "Connection Lost", "Your exit node is offline. Disable your exit node or contact your network admin for help.")
@@ -437,6 +462,18 @@ func (a *App) runBackend() error {
 			case ExitAllowLANEvent:
 				state.Prefs.ExitNodeAllowLANAccess = bool(e)
 				go b.backend.SetPrefs(state.Prefs)
+			case RefreshEvent:
+				go func() {
+					state.StatusFetching = true
+					st := b.backend.Status()
+					peers := make(map[tailcfg.StableNodeID]*ipnstate.PeerStatus)
+					for _, p := range st.Peer {
+						peers[p.ID] = p
+					}
+					state.Status = peers
+					a.notify(state)
+					state.StatusFetching = false
+				}()
 			case UseTailscaleDNSEvent:
 				state.Prefs.CorpDNS = bool(e)
 				go b.backend.SetPrefs(state.Prefs)
@@ -900,6 +937,9 @@ func (a *App) runUI() error {
 			ui.enabled.Value = p.WantRunning
 			ui.runningExit = p.AdvertisesExitNode()
 			ui.exitLAN.Value = p.ExitNodeAllowLANAccess
+			ui.useTailscaleDNS.Value = p.CorpDNS
+			ui.useTailscaleSubnets.Value = p.RouteAll
+			ui.allowIncomingTransactions.Value = p.ShieldsUp
 			w.Invalidate()
 		case url := <-a.browseURLs:
 			ui.signinType = noSignin
@@ -1039,6 +1079,7 @@ func (a *App) updateState(act jni.Object, state *clientState) {
 	}
 
 	netmap := state.backend.NetworkMap
+	pstatus := state.backend.Status
 	var (
 		peers []*tailcfg.Node
 		myID  tailcfg.UserID
@@ -1065,15 +1106,16 @@ func (a *App) updateState(act jni.Object, state *clientState) {
 		}
 		users[p.User] = struct{}{}
 		uiPeers = append(uiPeers, UIPeer{
-			Owner: p.User,
-			Peer:  p,
+			Owner:  p.User,
+			Peer:   p,
+			Status: pstatus[p.StableID],
 		})
 	}
 	// Add section (user) headers.
 	for u := range users {
 		name := netmap.UserProfiles[u].DisplayName
 		name = strings.ToUpper(name)
-		uiPeers = append(uiPeers, UIPeer{Owner: u, Name: name})
+		uiPeers = append(uiPeers, UIPeer{Owner: u, Name: name, Status: nil})
 	}
 	sort.Slice(uiPeers, func(i, j int) bool {
 		lhs, rhs := uiPeers[i], uiPeers[j]
@@ -1148,6 +1190,8 @@ func (a *App) processUIEvents(w *app.Window, events []UIEvent, act jni.Object, s
 		case LogoutEvent:
 			a.signOut()
 			requestBackend(e)
+		case RefreshEvent:
+			requestBackend(e)
 		case ConnectEvent:
 			requestBackend(e)
 		case RouteAllEvent:
diff --git a/cmd/tailscale/ui.go b/cmd/tailscale/ui.go
index e6d3560..ee37412 100644
--- a/cmd/tailscale/ui.go
+++ b/cmd/tailscale/ui.go
@@ -30,6 +30,7 @@ import (
 	"golang.org/x/exp/shiny/materialdesign/icons"
 	"tailscale.com/client/tailscale/apitype"
 	"tailscale.com/ipn"
+	"tailscale.com/ipn/ipnstate"
 	"tailscale.com/tailcfg"
 	"tailscale.com/version"
 
@@ -117,6 +118,7 @@ type UI struct {
 
 		useLoginServer widget.Clickable
 		copy           widget.Clickable
+		refresh        widget.Clickable
 		preferences    widget.Clickable
 		reauth         widget.Clickable
 		bug            widget.Clickable
@@ -182,6 +184,8 @@ type UIPeer struct {
 	Name string
 	// Peer is nil for section headers.
 	Peer *tailcfg.Node
+
+	Status *ipnstate.PeerStatus
 }
 
 // menuItem describes an item in a popup menu.
@@ -483,6 +487,10 @@ func (ui *UI) layout(gtx layout.Context, sysIns system.Insets, state *clientStat
 		events = append(events, LogoutEvent{})
 	}
 
+	if ui.menuClicked(&ui.menu.refresh) {
+		events = append(events, RefreshEvent{})
+	}
+
 	for i := range ui.shareDialog.targets {
 		t := &ui.shareDialog.targets[i]
 		select {
@@ -1316,6 +1324,7 @@ func (ui *UI) layoutMenu(gtx layout.Context, sysIns system.Insets, expiry time.T
 			items := []menuItem{
 				{title: "Copy my IP address", btn: &menu.copy},
 			}
+			items = append(items, menuItem{title: "Refresh status", btn: &menu.refresh})
 			if showExits {
 				items = append(items, menuItem{title: "Use exit node...", btn: &menu.exits})
 			}
@@ -1412,7 +1421,13 @@ func (ui *UI) layoutPeer(gtx layout.Context, sysIns system.Insets, p *UIPeer, us
 				layout.Rigid(func(gtx C) D {
 					return layout.Inset{Bottom: unit.Dp(4)}.Layout(gtx, func(gtx C) D {
 						name := p.Peer.DisplayName(p.Peer.User == user)
-						return material.H6(ui.theme, name).Layout(gtx)
+						label := material.H6(ui.theme, name)
+						if p.Status == nil {
+							label.Color = rgb(0x434343)
+						} else if !p.Status.Online {
+							label.Color = rgb(0x8f8f8f)
+						}
+						return label.Layout(gtx)
 					})
 				}),
 				layout.Rigid(func(gtx C) D {
@@ -1422,9 +1437,29 @@ func (ui *UI) layoutPeer(gtx layout.Context, sysIns system.Insets, p *UIPeer, us
 							bestIP = ip
 						}
 					}
-					l := material.Body2(ui.theme, bestIP.String())
-					l.Color = rgb(0x434343)
-					return l.Layout(gtx)
+					var connstr string
+					if p.Status != nil && p.Status.Online {
+						if p.Status.Relay != "" && p.Status.CurAddr == "" {
+							connstr = p.Status.Relay
+						} else if p.Status.CurAddr != "" {
+							connstr = p.Status.CurAddr
+						}
+					}
+					return layout.Flex{Axis: layout.Horizontal}.Layout(gtx,
+						layout.Flexed(4.0, func(gtx C) D {
+							l := material.Body2(ui.theme, bestIP.String())
+							l.Color = rgb(0x434343)
+							l.Font.Variant = "Mono"
+							return l.Layout(gtx)
+						}),
+						layout.Flexed(5.0, func(gtx C) D {
+							l := material.Body2(ui.theme, connstr)
+							l.Color = rgb(0x434343)
+							l.Font.Variant = "Mono"
+							l.Alignment = text.End
+							return l.Layout(gtx)
+						}),
+					)
 				}),
 			)
 		})
diff --git a/go.mod b/go.mod
index c8bd15d..8e47873 100644
--- a/go.mod
+++ b/go.mod
@@ -2,6 +2,10 @@ module github.com/tailscale/tailscale-android
 
 go 1.20
 
+
+replace github.com/tailscale/wireguard-go => ../wireguard-go
+replace tailscale.com => ../tailscale
+
 require (
 	eliasnaur.com/font v0.0.0-20220124212145-832bb8fc08c3
 	gioui.org v0.0.0-20230206180804-32c6a9b10d0b
