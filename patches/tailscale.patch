From 1e187aaed490c957818e46c5b43b1fe739069fb2 Mon Sep 17 00:00:00 2001
From: xiaoyu <7547189+xytoki@users.noreply.github.com>
Date: Wed, 4 Jun 2025 14:14:06 +0800
Subject: [PATCH] xy-patch-latest

---
 cmd/tailscale/cli/set.go        |  3 +++
 cmd/tailscale/cli/up.go         |  8 ++++++++
 ipn/ipn_clone.go                |  1 +
 ipn/ipn_view.go                 |  2 ++
 ipn/ipnlocal/local.go           |  5 ++++-
 ipn/prefs.go                    | 11 ++++++++++-
 net/netcheck/netcheck.go        | 21 +++++++++++++++------
 net/tsaddr/tsaddr.go            | 16 ++++++++++++++--
 types/netmap/netmap.go          |  1 +
 wgengine/magicsock/derp.go      | 26 ++++++++++++++++++++++++++
 wgengine/magicsock/magicsock.go | 21 +++++++++++++++++++++
 wgengine/wgcfg/nmcfg/nmcfg.go   | 19 +++++++++++++++++++
 12 files changed, 124 insertions(+), 10 deletions(-)

diff --git a/cmd/tailscale/cli/set.go b/cmd/tailscale/cli/set.go
index aa5966698..fa5174004 100644
--- a/cmd/tailscale/cli/set.go
+++ b/cmd/tailscale/cli/set.go
@@ -44,6 +44,7 @@
 
 type setArgsT struct {
 	acceptRoutes           bool
+	acceptLocalRoutes      bool
 	acceptDNS              bool
 	exitNodeIP             string
 	exitNodeAllowLANAccess bool
@@ -72,6 +73,7 @@ func newSetFlagSet(goos string, setArgs *setArgsT) *flag.FlagSet {
 
 	setf.StringVar(&setArgs.profileName, "nickname", "", "nickname for the current account")
 	setf.BoolVar(&setArgs.acceptRoutes, "accept-routes", acceptRouteDefault(goos), "accept routes advertised by other Tailscale nodes")
+	setf.BoolVar(&setArgs.acceptLocalRoutes, "accept-local-routes", false, "accept routes advertised by other Tailscale nodes even if they overlap with the local machine's routes")
 	setf.BoolVar(&setArgs.acceptDNS, "accept-dns", true, "accept DNS configuration from the admin panel")
 	setf.StringVar(&setArgs.exitNodeIP, "exit-node", "", "Tailscale exit node (IP or base name) for internet traffic, or empty string to not use an exit node")
 	setf.BoolVar(&setArgs.exitNodeAllowLANAccess, "exit-node-allow-lan-access", false, "Allow direct access to the local network when routing traffic via an exit node")
@@ -140,6 +142,7 @@ func runSet(ctx context.Context, args []string) (retErr error) {
 		Prefs: ipn.Prefs{
 			ProfileName:            setArgs.profileName,
 			RouteAll:               setArgs.acceptRoutes,
+			RouteLocal:             setArgs.acceptLocalRoutes,
 			CorpDNS:                setArgs.acceptDNS,
 			ExitNodeAllowLANAccess: setArgs.exitNodeAllowLANAccess,
 			ShieldsUp:              setArgs.shieldsUp,
diff --git a/cmd/tailscale/cli/up.go b/cmd/tailscale/cli/up.go
index e4bb6f576..30b5216ea 100644
--- a/cmd/tailscale/cli/up.go
+++ b/cmd/tailscale/cli/up.go
@@ -98,6 +98,7 @@ func newUpFlagSet(goos string, upArgs *upArgsT, cmd string) *flag.FlagSet {
 
 	upf.StringVar(&upArgs.server, "login-server", ipn.DefaultControlURL, "base URL of control server")
 	upf.BoolVar(&upArgs.acceptRoutes, "accept-routes", acceptRouteDefault(goos), "accept routes advertised by other Tailscale nodes")
+	upf.BoolVar(&upArgs.acceptLocalRoutes, "accept-local-routes", false, "accept routes advertised by other Tailscale nodes even if they overlap with the local machine's routes")
 	upf.BoolVar(&upArgs.acceptDNS, "accept-dns", true, "accept DNS configuration from the admin panel")
 	upf.Var(notFalseVar{}, "host-routes", hidden+"install host routes to other Tailscale nodes (must be true as of Tailscale 1.67+)")
 	upf.StringVar(&upArgs.exitNodeIP, "exit-node", "", "Tailscale exit node (IP or base name) for internet traffic, or empty string to not use an exit node")
@@ -166,6 +167,7 @@ type upArgsT struct {
 	reset                  bool
 	server                 string
 	acceptRoutes           bool
+	acceptLocalRoutes      bool
 	acceptDNS              bool
 	exitNodeIP             string
 	exitNodeAllowLANAccess bool
@@ -272,6 +274,7 @@ func prefsFromUpArgs(upArgs upArgsT, warnf logger.Logf, st *ipnstate.Status, goo
 	prefs.ControlURL = upArgs.server
 	prefs.WantRunning = true
 	prefs.RouteAll = upArgs.acceptRoutes
+	prefs.RouteLocal = upArgs.acceptLocalRoutes
 	if distro.Get() == distro.Synology {
 		// ipn.NewPrefs returns a non-zero Netfilter default. But Synology only
 		// supports "off" mode.
@@ -756,6 +759,7 @@ func init() {
 	// The rest are 1:1:
 	addPrefFlagMapping("accept-dns", "CorpDNS")
 	addPrefFlagMapping("accept-routes", "RouteAll")
+	addPrefFlagMapping("accept-local-routes", "RouteLocal")
 	addPrefFlagMapping("advertise-tags", "AdvertiseTags")
 	addPrefFlagMapping("hostname", "Hostname")
 	addPrefFlagMapping("login-server", "ControlURL")
@@ -1007,6 +1011,10 @@ func prefsToFlags(env upCheckEnv, prefs *ipn.Prefs) (flagVal map[string]any) {
 			set(prefs.ControlURL)
 		case "accept-routes":
 			set(prefs.RouteAll)
+		case "accept-local-routes":
+			set(prefs.RouteLocal)
+		case "host-routes":
+			set(prefs.AllowSingleHosts)
 		case "accept-dns":
 			set(prefs.CorpDNS)
 		case "shields-up":
diff --git a/ipn/ipn_clone.go b/ipn/ipn_clone.go
index 65438444e..71e1229cd 100644
--- a/ipn/ipn_clone.go
+++ b/ipn/ipn_clone.go
@@ -72,6 +72,7 @@ func (src *Prefs) Clone() *Prefs {
 var _PrefsCloneNeedsRegeneration = Prefs(struct {
 	ControlURL             string
 	RouteAll               bool
+	RouteLocal             bool
 	ExitNodeID             tailcfg.StableNodeID
 	ExitNodeIP             netip.Addr
 	InternalExitNodePrior  tailcfg.StableNodeID
diff --git a/ipn/ipn_view.go b/ipn/ipn_view.go
index 871270b85..d610517b3 100644
--- a/ipn/ipn_view.go
+++ b/ipn/ipn_view.go
@@ -133,6 +133,7 @@ func (v *PrefsView) UnmarshalJSON(b []byte) error {
 
 func (v PrefsView) ControlURL() string                          { return v.ж.ControlURL }
 func (v PrefsView) RouteAll() bool                              { return v.ж.RouteAll }
+func (v PrefsView) RouteLocal() bool                            { return v.ж.RouteLocal }
 func (v PrefsView) ExitNodeID() tailcfg.StableNodeID            { return v.ж.ExitNodeID }
 func (v PrefsView) ExitNodeIP() netip.Addr                      { return v.ж.ExitNodeIP }
 func (v PrefsView) InternalExitNodePrior() tailcfg.StableNodeID { return v.ж.InternalExitNodePrior }
@@ -177,6 +178,7 @@ func (v PrefsView) Persist() persist.PersistView          { return v.ж.Persist.
 var _PrefsViewNeedsRegeneration = Prefs(struct {
 	ControlURL             string
 	RouteAll               bool
+	RouteLocal             bool
 	ExitNodeID             tailcfg.StableNodeID
 	ExitNodeIP             netip.Addr
 	InternalExitNodePrior  tailcfg.StableNodeID
diff --git a/ipn/ipnlocal/local.go b/ipn/ipnlocal/local.go
index e494920b1..2f1db46d3 100644
--- a/ipn/ipnlocal/local.go
+++ b/ipn/ipnlocal/local.go
@@ -4831,6 +4831,9 @@ func (b *LocalBackend) authReconfig() {
 	if prefs.RouteAll() {
 		flags |= netmap.AllowSubnetRoutes
 	}
+	if prefs.RouteLocal() {
+		flags |= netmap.AllowLocalRoutes
+	}
 	if hasPAC && disableSubnetsIfPAC {
 		if flags&netmap.AllowSubnetRoutes != 0 {
 			b.logf("authReconfig: have PAC; disabling subnet routes")
@@ -4860,7 +4863,7 @@ func (b *LocalBackend) authReconfig() {
 	if err == wgengine.ErrNoChanges {
 		return
 	}
-	b.logf("[v1] authReconfig: ra=%v dns=%v 0x%02x: %v", prefs.RouteAll(), prefs.CorpDNS(), flags, err)
+	b.logf("[v1] authReconfig: ra=%v rl=%v dns=%v 0x%02x: %v", prefs.RouteAll(), prefs.RouteLocal(), prefs.CorpDNS(), flags, err)
 
 	b.initPeerAPIListener()
 	b.readvertiseAppConnectorRoutes()
diff --git a/ipn/prefs.go b/ipn/prefs.go
index 01275a7e2..b8a1c0895 100644
--- a/ipn/prefs.go
+++ b/ipn/prefs.go
@@ -76,6 +76,10 @@ type Prefs struct {
 	// controlled by ExitNodeID/IP below.
 	RouteAll bool
 
+	// RouteLocal specifies whether to install a route if it includes
+	// a local ip address. This is a temporary workaround.
+	RouteLocal bool
+
 	// ExitNodeID and ExitNodeIP specify the node that should be used
 	// as an exit node for internet traffic. At most one of these
 	// should be non-zero.
@@ -320,9 +324,10 @@ type AppConnectorPrefs struct {
 // Prefs (see AutoUpdateSet for example).
 type MaskedPrefs struct {
 	Prefs
-
 	ControlURLSet             bool                `json:",omitempty"`
 	RouteAllSet               bool                `json:",omitempty"`
+	RouteLocalSet             bool                `json:",omitempty"`
+	AllowSingleHostsSet       bool                `json:",omitempty"`
 	ExitNodeIDSet             bool                `json:",omitempty"`
 	ExitNodeIPSet             bool                `json:",omitempty"`
 	InternalExitNodePriorSet  bool                `json:",omitempty"` // Internal; can't be set by LocalAPI clients
@@ -509,6 +514,7 @@ func (p *Prefs) pretty(goos string) string {
 	var sb strings.Builder
 	sb.WriteString("Prefs{")
 	fmt.Fprintf(&sb, "ra=%v ", p.RouteAll)
+	fmt.Fprintf(&sb, "rl=%v ", p.RouteLocal)
 	fmt.Fprintf(&sb, "dns=%v want=%v ", p.CorpDNS, p.WantRunning)
 	if p.RunSSH {
 		sb.WriteString("ssh=true ")
@@ -607,6 +613,8 @@ func (p *Prefs) Equals(p2 *Prefs) bool {
 
 	return p.ControlURL == p2.ControlURL &&
 		p.RouteAll == p2.RouteAll &&
+		p.RouteLocal == p2.RouteLocal &&
+		p.AllowSingleHosts == p2.AllowSingleHosts &&
 		p.ExitNodeID == p2.ExitNodeID &&
 		p.ExitNodeIP == p2.ExitNodeIP &&
 		p.InternalExitNodePrior == p2.InternalExitNodePrior &&
@@ -678,6 +686,7 @@ func NewPrefs() *Prefs {
 		ControlURL: "",
 
 		CorpDNS:             true,
+		RouteLocal:          false,
 		WantRunning:         false,
 		NetfilterMode:       preftype.NetfilterOn,
 		NoStatefulFiltering: opt.NewBool(true),
diff --git a/net/netcheck/netcheck.go b/net/netcheck/netcheck.go
index c9f03966b..3aa72e70a 100644
--- a/net/netcheck/netcheck.go
+++ b/net/netcheck/netcheck.go
@@ -1089,7 +1089,11 @@ func (c *Client) runHTTPOnlyChecks(ctx context.Context, last *Report, rs *report
 		go func() {
 			defer wg.Done()
 			node := rg.Nodes[0]
-			req, _ := http.NewRequestWithContext(ctx, "HEAD", "https://"+node.HostName+"/derp/probe", nil)
+			tlsport := 443
+			if node.DERPPort != 0 {
+				tlsport = node.DERPPort
+			}
+			req, _ := http.NewRequestWithContext(ctx, "HEAD", "https://"+node.HostName+":"+fmt.Sprint(tlsport)+"/derp/probe", nil)
 			// One warm-up one to get HTTP connection set
 			// up and get a connection from the browser's
 			// pool.
@@ -1165,11 +1169,11 @@ func (c *Client) measureHTTPSLatency(ctx context.Context, reg *tailcfg.DERPRegio
 		},
 	}
 	hc := &http.Client{Transport: tr}
-
-	// This is the request that will be measured, the request and response
-	// should be small enough to fit into a single packet each way unless the
-	// connection has already become unstable.
-	req, err := http.NewRequestWithContext(ctx, "GET", "https://"+node.HostName+"/derp/latency-check", nil)
+	tlsport := 443
+	if node.DERPPort != 0 {
+		tlsport = node.DERPPort
+	}
+	req, err := http.NewRequestWithContext(ctx, "GET", "https://"+node.HostName+":"+fmt.Sprint(tlsport)+"/derp/latency-check", nil)
 	if err != nil {
 		return 0, ip, err
 	}
@@ -1422,6 +1426,11 @@ func (c *Client) addReportHistoryAndSetPreferredDERP(rs *reportState, r *Report,
 			d = time.Duration(float64(d) * score)
 		}
 
+		if regionID < 0 {
+			// STUNOnly is not readable here
+			// so use negative region IDs to mark stun-only servers
+			continue
+		}
 		if regionID == prevDERP {
 			oldRegionCurLatency = d
 		}
diff --git a/net/tsaddr/tsaddr.go b/net/tsaddr/tsaddr.go
index 06e6a26dd..de7dda90c 100644
--- a/net/tsaddr/tsaddr.go
+++ b/net/tsaddr/tsaddr.go
@@ -26,6 +26,18 @@ func ChromeOSVMRange() netip.Prefix {
 
 var chromeOSRange oncePrefix
 
+func CustomNetRange() netip.Prefix {
+	customNetRange.Do(func() { mustPrefix(&customNetRange.v, "172.22.98.0/24") })
+	return customNetRange.v
+}
+func CustomNet6Range() netip.Prefix {
+	customNet6Range.Do(func() { mustPrefix(&customNet6Range.v, "fd00:3d22:4e98:cafe::/64") })
+	return customNet6Range.v
+}
+
+var customNetRange oncePrefix
+var customNet6Range oncePrefix
+
 // CGNATRange returns the Carrier Grade NAT address range that
 // is the superset range that Tailscale assigns out of.
 // See https://tailscale.com/s/cgnat
@@ -72,13 +84,13 @@ func IsTailscaleIP(ip netip.Addr) bool {
 	if ip.Is4() {
 		return IsTailscaleIPv4(ip)
 	}
-	return TailscaleULARange().Contains(ip)
+	return CustomNet6Range().Contains(ip) || TailscaleULARange().Contains(ip)
 }
 
 // IsTailscaleIPv4 reports whether an IPv4 IP is an IP address that
 // Tailscale assigns from.
 func IsTailscaleIPv4(ip netip.Addr) bool {
-	return CGNATRange().Contains(ip) && !ChromeOSVMRange().Contains(ip)
+	return CustomNetRange().Contains(ip) || (CGNATRange().Contains(ip) && !ChromeOSVMRange().Contains(ip))
 }
 
 // TailscaleULARange returns the IPv6 Unique Local Address range that
diff --git a/types/netmap/netmap.go b/types/netmap/netmap.go
index 963f80a44..495e60cab 100644
--- a/types/netmap/netmap.go
+++ b/types/netmap/netmap.go
@@ -436,6 +436,7 @@ func (nm *NetworkMap) JSON() string {
 const (
 	_ WGConfigFlags = 1 << iota
 	AllowSubnetRoutes
+	AllowLocalRoutes
 )
 
 // IPServiceMappings maps IP addresses to service names. This is the inverse of
diff --git a/wgengine/magicsock/derp.go b/wgengine/magicsock/derp.go
index ffdff14a1..34b07b7b2 100644
--- a/wgengine/magicsock/derp.go
+++ b/wgengine/magicsock/derp.go
@@ -271,6 +271,32 @@ func (c *Conn) startDerpHomeConnectLocked() {
 	c.goDerpConnect(c.myDerp)
 }
 
+
+
+func (c *Conn) prepareFallbackDERP(ep *endpoint) {
+	if len(ep.endpointState) <= 2 {
+		// derp connected, so the only endpoint is derp
+		onlyderp := true
+		for addr := range ep.endpointState {
+			if addr.Addr() != tailcfg.DerpMagicIPAddr {
+				onlyderp = false
+				break
+			}
+		}
+		if onlyderp {
+			derpid := int(ep.derpAddr.Port())
+			active, ok := c.activeDerp[derpid]
+			if !ok {
+				c.goDerpConnect(derpid)
+				c.logf("magicsock: prepare fallback derp to %v at %v", ep.discoShort, derpid)
+			} else {
+				*active.lastWrite = time.Now()
+			}
+		}
+	}
+}
+
+
 // goDerpConnect starts a goroutine to start connecting to the given
 // DERP region ID.
 //
diff --git a/wgengine/magicsock/magicsock.go b/wgengine/magicsock/magicsock.go
index 3a4fdf8a2..b46664a2e 100644
--- a/wgengine/magicsock/magicsock.go
+++ b/wgengine/magicsock/magicsock.go
@@ -2170,6 +2170,26 @@ func (c *Conn) enqueueCallMeMaybe(derpAddr netip.AddrPort, de *endpoint) {
 		return
 	}
 
+	// Ignore endpoints from isolated peers.
+	if len(de.endpointState) == 0 {
+		// derp not initialized yet, so	no endpoints
+		return
+	}
+
+	if len(de.endpointState) <= 2 {
+		// derp connected, so the only endpoint is derp
+		onlyderp := true
+		for addr := range de.endpointState {
+			if addr.Addr() != tailcfg.DerpMagicIPAddr {
+				onlyderp = false
+				break
+			}
+		}
+		if onlyderp {
+			return
+		}
+	}
+
 	eps := make([]netip.AddrPort, 0, len(c.lastEndpoints))
 	for _, ep := range c.lastEndpoints {
 		eps = append(eps, ep.Addr)
@@ -2483,6 +2503,7 @@ func (c *Conn) SetNetworkMap(nm *netmap.NetworkMap) {
 				oldDiscoKey = epDisco.key
 			}
 			ep.updateFromNode(n, flags.heartbeatDisabled, flags.probeUDPLifetimeOn)
+			c.prepareFallbackDERP(ep)
 			c.peerMap.upsertEndpoint(ep, oldDiscoKey) // maybe update discokey mappings in peerMap
 			continue
 		}
diff --git a/wgengine/wgcfg/nmcfg/nmcfg.go b/wgengine/wgcfg/nmcfg/nmcfg.go
index 1add608e4..3b179de27 100644
--- a/wgengine/wgcfg/nmcfg/nmcfg.go
+++ b/wgengine/wgcfg/nmcfg/nmcfg.go
@@ -118,6 +118,10 @@ func WGCfg(nm *netmap.NetworkMap, logf logger.Logf, flags netmap.WGConfigFlags,
 		cpeer.V4MasqAddr = peer.SelfNodeV4MasqAddrForThisPeer().Clone()
 		cpeer.V6MasqAddr = peer.SelfNodeV6MasqAddrForThisPeer().Clone()
 		cpeer.IsJailed = peer.IsJailed()
+		var localIps []netip.Addr
+		for _, ep := range nm.SelfNode.Endpoints().All() {
+			localIps = append(localIps, ep.Addr())
+		}
 		for _, allowedIP := range peer.AllowedIPs().All() {
 			if allowedIP.Bits() == 0 && peer.StableID() != exitNode {
 				if didExitNodeWarn {
@@ -137,6 +141,21 @@ func WGCfg(nm *netmap.NetworkMap, logf logger.Logf, flags netmap.WGConfigFlags,
 					}
 					fmt.Fprintf(skippedSubnets, "%v from %q (%v)", allowedIP, nodeDebugName(peer), peer.Key().ShortString())
 					continue
+				} else if (flags & netmap.AllowLocalRoutes) == 0 {
+					ignoreRoute := false
+					for _, localIP := range localIps {
+						if allowedIP.Contains(localIP) {
+							ignoreRoute = true
+							break
+						}
+					}
+					if ignoreRoute {
+						if skippedSubnets.Len() > 0 {
+							skippedSubnets.WriteString(", ")
+						}
+						fmt.Fprintf(skippedSubnets, "%v (localip) from %q (%v)", allowedIP, nodeDebugName(peer), peer.Key().ShortString())
+						continue
+					}
 				}
 			}
 			cpeer.AllowedIPs = append(cpeer.AllowedIPs, allowedIP)
-- 
2.49.0.windows.1

