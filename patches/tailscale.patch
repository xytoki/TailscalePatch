diff --git a/cmd/tailscale/cli/set.go b/cmd/tailscale/cli/set.go
index 02d4f5a06..95b5c0621 100644
--- a/cmd/tailscale/cli/set.go
+++ b/cmd/tailscale/cli/set.go
@@ -39,6 +39,7 @@
 
 type setArgsT struct {
 	acceptRoutes           bool
+	acceptLocalRoutes      bool
 	acceptDNS              bool
 	exitNodeIP             string
 	exitNodeAllowLANAccess bool
@@ -63,6 +64,7 @@ func newSetFlagSet(goos string, setArgs *setArgsT) *flag.FlagSet {
 
 	setf.StringVar(&setArgs.profileName, "nickname", "", "nickname for the current account")
 	setf.BoolVar(&setArgs.acceptRoutes, "accept-routes", false, "accept routes advertised by other Tailscale nodes")
+	setf.BoolVar(&setArgs.acceptLocalRoutes, "accept-local-routes", false, "accept routes advertised by other Tailscale nodes even if they overlap with the local machine's routes")
 	setf.BoolVar(&setArgs.acceptDNS, "accept-dns", false, "accept DNS configuration from the admin panel")
 	setf.StringVar(&setArgs.exitNodeIP, "exit-node", "", "Tailscale exit node (IP or base name) for internet traffic, or empty string to not use an exit node")
 	setf.BoolVar(&setArgs.exitNodeAllowLANAccess, "exit-node-allow-lan-access", false, "Allow direct access to the local network when routing traffic via an exit node")
@@ -108,6 +110,7 @@ func runSet(ctx context.Context, args []string) (retErr error) {
 		Prefs: ipn.Prefs{
 			ProfileName:            setArgs.profileName,
 			RouteAll:               setArgs.acceptRoutes,
+			RouteLocal:             setArgs.acceptLocalRoutes,
 			CorpDNS:                setArgs.acceptDNS,
 			ExitNodeAllowLANAccess: setArgs.exitNodeAllowLANAccess,
 			ShieldsUp:              setArgs.shieldsUp,
diff --git a/cmd/tailscale/cli/up.go b/cmd/tailscale/cli/up.go
index 3aa66865f..3a3f1e31a 100644
--- a/cmd/tailscale/cli/up.go
+++ b/cmd/tailscale/cli/up.go
@@ -104,6 +104,7 @@ func newUpFlagSet(goos string, upArgs *upArgsT, cmd string) *flag.FlagSet {
 
 	upf.StringVar(&upArgs.server, "login-server", ipn.DefaultControlURL, "base URL of control server")
 	upf.BoolVar(&upArgs.acceptRoutes, "accept-routes", acceptRouteDefault(goos), "accept routes advertised by other Tailscale nodes")
+	upf.BoolVar(&upArgs.acceptLocalRoutes, "accept-local-routes", false, "accept routes advertised by other Tailscale nodes even if they overlap with the local machine's routes")
 	upf.BoolVar(&upArgs.acceptDNS, "accept-dns", true, "accept DNS configuration from the admin panel")
 	upf.BoolVar(&upArgs.singleRoutes, "host-routes", true, "HIDDEN: install host routes to other Tailscale nodes")
 	upf.StringVar(&upArgs.exitNodeIP, "exit-node", "", "Tailscale exit node (IP or base name) for internet traffic, or empty string to not use an exit node")
@@ -155,6 +156,7 @@ type upArgsT struct {
 	reset                  bool
 	server                 string
 	acceptRoutes           bool
+	acceptLocalRoutes      bool
 	acceptDNS              bool
 	singleRoutes           bool
 	exitNodeIP             string
@@ -260,6 +262,7 @@ func prefsFromUpArgs(upArgs upArgsT, warnf logger.Logf, st *ipnstate.Status, goo
 	prefs.ControlURL = upArgs.server
 	prefs.WantRunning = true
 	prefs.RouteAll = upArgs.acceptRoutes
+	prefs.RouteLocal = upArgs.acceptLocalRoutes
 	if distro.Get() == distro.Synology {
 		// ipn.NewPrefs returns a non-zero Netfilter default. But Synology only
 		// supports "off" mode.
@@ -705,6 +708,7 @@ func init() {
 	// The rest are 1:1:
 	addPrefFlagMapping("accept-dns", "CorpDNS")
 	addPrefFlagMapping("accept-routes", "RouteAll")
+	addPrefFlagMapping("accept-local-routes", "RouteLocal")
 	addPrefFlagMapping("advertise-tags", "AdvertiseTags")
 	addPrefFlagMapping("host-routes", "AllowSingleHosts")
 	addPrefFlagMapping("hostname", "Hostname")
@@ -940,6 +944,8 @@ func prefsToFlags(env upCheckEnv, prefs *ipn.Prefs) (flagVal map[string]any) {
 			set(prefs.ControlURL)
 		case "accept-routes":
 			set(prefs.RouteAll)
+		case "accept-local-routes":
+			set(prefs.RouteLocal)
 		case "host-routes":
 			set(prefs.AllowSingleHosts)
 		case "accept-dns":
diff --git a/go.mod b/go.mod
index 25dabfc38..55c897375 100644
--- a/go.mod
+++ b/go.mod
@@ -2,6 +2,8 @@ module tailscale.com
 
 go 1.22.0
 
+replace github.com/tailscale/wireguard-go => ../wireguard-go
+
 require (
 	filippo.io/mkcert v1.4.4
 	github.com/akutz/memconn v0.1.0
diff --git a/ipn/ipn_clone.go b/ipn/ipn_clone.go
index 40cc44296..a451a73ee 100644
--- a/ipn/ipn_clone.go
+++ b/ipn/ipn_clone.go
@@ -32,6 +32,7 @@ func (src *Prefs) Clone() *Prefs {
 var _PrefsCloneNeedsRegeneration = Prefs(struct {
 	ControlURL             string
 	RouteAll               bool
+	RouteLocal             bool
 	AllowSingleHosts       bool
 	ExitNodeID             tailcfg.StableNodeID
 	ExitNodeIP             netip.Addr
diff --git a/ipn/ipn_view.go b/ipn/ipn_view.go
index 18436867d..b927c0563 100644
--- a/ipn/ipn_view.go
+++ b/ipn/ipn_view.go
@@ -65,6 +65,7 @@ func (v *PrefsView) UnmarshalJSON(b []byte) error {
 
 func (v PrefsView) ControlURL() string                 { return v.ж.ControlURL }
 func (v PrefsView) RouteAll() bool                     { return v.ж.RouteAll }
+func (v PrefsView) RouteLocal() bool                   { return v.ж.RouteLocal }
 func (v PrefsView) AllowSingleHosts() bool             { return v.ж.AllowSingleHosts }
 func (v PrefsView) ExitNodeID() tailcfg.StableNodeID   { return v.ж.ExitNodeID }
 func (v PrefsView) ExitNodeIP() netip.Addr             { return v.ж.ExitNodeIP }
@@ -97,6 +98,7 @@ func (v PrefsView) Persist() persist.PersistView          { return v.ж.Persist.
 var _PrefsViewNeedsRegeneration = Prefs(struct {
 	ControlURL             string
 	RouteAll               bool
+	RouteLocal             bool
 	AllowSingleHosts       bool
 	ExitNodeID             tailcfg.StableNodeID
 	ExitNodeIP             netip.Addr
diff --git a/ipn/ipnlocal/local.go b/ipn/ipnlocal/local.go
index 13d13718f..31779069f 100644
--- a/ipn/ipnlocal/local.go
+++ b/ipn/ipnlocal/local.go
@@ -3538,6 +3538,9 @@ func (b *LocalBackend) authReconfig() {
 	if prefs.RouteAll() {
 		flags |= netmap.AllowSubnetRoutes
 	}
+	if prefs.RouteLocal() {
+		flags |= netmap.AllowLocalRoutes
+	}
 	if prefs.AllowSingleHosts() {
 		flags |= netmap.AllowSingleHosts
 	}
@@ -3570,7 +3573,7 @@ func (b *LocalBackend) authReconfig() {
 	if err == wgengine.ErrNoChanges {
 		return
 	}
-	b.logf("[v1] authReconfig: ra=%v dns=%v 0x%02x: %v", prefs.RouteAll(), prefs.CorpDNS(), flags, err)
+	b.logf("[v1] authReconfig: ra=%v rl=%v dns=%v 0x%02x: %v", prefs.RouteAll(), prefs.RouteLocal(), prefs.CorpDNS(), flags, err)
 
 	b.initPeerAPIListener()
 }
diff --git a/ipn/prefs.go b/ipn/prefs.go
index 7bfbd613f..c27a23db7 100644
--- a/ipn/prefs.go
+++ b/ipn/prefs.go
@@ -73,6 +73,10 @@ type Prefs struct {
 	// controlled by ExitNodeID/IP below.
 	RouteAll bool
 
+	// RouteLocal specifies whether to install a route if it includes
+	// a local ip address. This is a temporary workaround.
+	RouteLocal bool
+
 	// AllowSingleHosts specifies whether to install routes for each
 	// node IP on the tailscale network, in addition to a route for
 	// the whole network.
@@ -266,9 +270,9 @@ type AppConnectorPrefs struct {
 // Prefs (see AutoUpdateSet for example).
 type MaskedPrefs struct {
 	Prefs
-
 	ControlURLSet             bool                `json:",omitempty"`
 	RouteAllSet               bool                `json:",omitempty"`
+	RouteLocalSet             bool                `json:",omitempty"`
 	AllowSingleHostsSet       bool                `json:",omitempty"`
 	ExitNodeIDSet             bool                `json:",omitempty"`
 	ExitNodeIPSet             bool                `json:",omitempty"`
@@ -445,6 +449,7 @@ func (p *Prefs) pretty(goos string) string {
 	var sb strings.Builder
 	sb.WriteString("Prefs{")
 	fmt.Fprintf(&sb, "ra=%v ", p.RouteAll)
+	fmt.Fprintf(&sb, "rl=%v ", p.RouteLocal)
 	if !p.AllowSingleHosts {
 		sb.WriteString("mesh=false ")
 	}
@@ -533,6 +538,7 @@ func (p *Prefs) Equals(p2 *Prefs) bool {
 
 	return p.ControlURL == p2.ControlURL &&
 		p.RouteAll == p2.RouteAll &&
+		p.RouteLocal == p2.RouteLocal &&
 		p.AllowSingleHosts == p2.AllowSingleHosts &&
 		p.ExitNodeID == p2.ExitNodeID &&
 		p.ExitNodeIP == p2.ExitNodeIP &&
@@ -614,6 +620,7 @@ func NewPrefs() *Prefs {
 		ControlURL: "",
 
 		RouteAll:         true,
+		RouteLocal:       false,
 		AllowSingleHosts: true,
 		CorpDNS:          true,
 		WantRunning:      false,
diff --git a/net/netcheck/netcheck.go b/net/netcheck/netcheck.go
index 862743540..9c307fa2c 100644
--- a/net/netcheck/netcheck.go
+++ b/net/netcheck/netcheck.go
@@ -1079,7 +1079,7 @@ func (c *Client) checkCaptivePortal(ctx context.Context, dm *tailcfg.DERPMap, pr
 		(preferredDERP != 0 && len(dm.Regions[preferredDERP].Nodes) == 0) {
 		rids := make([]int, 0, len(dm.Regions))
 		for id, reg := range dm.Regions {
-			if reg == nil || reg.Avoid || len(reg.Nodes) == 0 {
+			if reg == nil || reg.Avoid || len(reg.Nodes) == 0 || reg.Nodes[0].DERPPort != 0 {
 				continue
 			}
 			rids = append(rids, id)
@@ -1098,8 +1098,11 @@ func (c *Client) checkCaptivePortal(ctx context.Context, dm *tailcfg.DERPMap, pr
 		// TODO(bradfitz,andrew-d): how to actually handle this nicely?
 		return false, nil
 	}
-
-	req, err := http.NewRequestWithContext(ctx, "GET", "http://"+node.HostName+"/generate_204", nil)
+	httpport := 80
+	if node.DERPPort != 0 {
+		httpport = node.DERPPort
+	}
+	req, err := http.NewRequestWithContext(ctx, "GET", "http://"+node.HostName+":"+fmt.Sprint(httpport)+"/generate_204", nil)
 	if err != nil {
 		return false, err
 	}
@@ -1150,7 +1153,11 @@ func (c *Client) runHTTPOnlyChecks(ctx context.Context, last *Report, rs *report
 		go func() {
 			defer wg.Done()
 			node := rg.Nodes[0]
-			req, _ := http.NewRequestWithContext(ctx, "HEAD", "https://"+node.HostName+"/derp/probe", nil)
+			tlsport := 443
+			if node.DERPPort != 0 {
+				tlsport = node.DERPPort
+			}
+			req, _ := http.NewRequestWithContext(ctx, "HEAD", "https://"+node.HostName+":"+fmt.Sprint(tlsport)+"/derp/probe", nil)
 			// One warm-up one to get HTTP connection set
 			// up and get a connection from the browser's
 			// pool.
@@ -1221,8 +1228,11 @@ func (c *Client) measureHTTPSLatency(ctx context.Context, reg *tailcfg.DERPRegio
 		},
 	}
 	hc := &http.Client{Transport: tr}
-
-	req, err := http.NewRequestWithContext(ctx, "GET", "https://"+node.HostName+"/derp/latency-check", nil)
+	tlsport := 443
+	if node.DERPPort != 0 {
+		tlsport = node.DERPPort
+	}
+	req, err := http.NewRequestWithContext(ctx, "GET", "https://"+node.HostName+":"+fmt.Sprint(tlsport)+"/derp/latency-check", nil)
 	if err != nil {
 		return 0, ip, err
 	}
@@ -1455,6 +1465,11 @@ func (c *Client) addReportHistoryAndSetPreferredDERP(rs *reportState, r *Report,
 			d = time.Duration(float64(d) * score)
 		}
 
+		if regionID < 0 {
+			// STUNOnly is not readable here
+			// so use negative region IDs to mark stun-only servers
+			continue
+		}
 		if regionID == prevDERP {
 			oldRegionCurLatency = d
 		}
diff --git a/net/tsaddr/tsaddr.go b/net/tsaddr/tsaddr.go
index 93a720b01..9ce92bd0c 100644
--- a/net/tsaddr/tsaddr.go
+++ b/net/tsaddr/tsaddr.go
@@ -26,6 +26,18 @@ func ChromeOSVMRange() netip.Prefix {
 
 var chromeOSRange oncePrefix
 
+func CustomNetRange() netip.Prefix {
+	customNetRange.Do(func() { mustPrefix(&customNetRange.v, "172.22.98.0/24") })
+	return customNetRange.v
+}
+func CustomNet6Range() netip.Prefix {
+	customNet6Range.Do(func() { mustPrefix(&customNet6Range.v, "fd00:3d22:4e98:cafe::/64") })
+	return customNet6Range.v
+}
+
+var customNetRange oncePrefix
+var customNet6Range oncePrefix
+
 // CGNATRange returns the Carrier Grade NAT address range that
 // is the superset range that Tailscale assigns out of.
 // See https://tailscale.com/s/cgnat
@@ -70,9 +82,9 @@ func TailscaleServiceIPv6() netip.Addr {
 // Tailscale assigns from.
 func IsTailscaleIP(ip netip.Addr) bool {
 	if ip.Is4() {
-		return CGNATRange().Contains(ip) && !ChromeOSVMRange().Contains(ip)
+		return CustomNetRange().Contains(ip) || (CGNATRange().Contains(ip) && !ChromeOSVMRange().Contains(ip))
 	}
-	return TailscaleULARange().Contains(ip)
+	return CustomNet6Range().Contains(ip) || TailscaleULARange().Contains(ip)
 }
 
 // TailscaleULARange returns the IPv6 Unique Local Address range that
diff --git a/types/netmap/netmap.go b/types/netmap/netmap.go
index 693701bb5..5a7b62f3c 100644
--- a/types/netmap/netmap.go
+++ b/types/netmap/netmap.go
@@ -383,4 +383,5 @@ func (nm *NetworkMap) JSON() string {
 const (
 	AllowSingleHosts WGConfigFlags = 1 << iota
 	AllowSubnetRoutes
+	AllowLocalRoutes
 )
diff --git a/wgengine/magicsock/derp.go b/wgengine/magicsock/derp.go
index 947466d2c..3a9d2516b 100644
--- a/wgengine/magicsock/derp.go
+++ b/wgengine/magicsock/derp.go
@@ -188,6 +188,32 @@ func (c *Conn) startDerpHomeConnectLocked() {
 	c.goDerpConnect(c.myDerp)
 }
 
+
+
+func (c *Conn) prepareFallbackDERP(ep *endpoint) {
+	if len(ep.endpointState) <= 2 {
+		// derp connected, so the only endpoint is derp
+		onlyderp := true
+		for addr := range ep.endpointState {
+			if addr.Addr() != tailcfg.DerpMagicIPAddr {
+				onlyderp = false
+				break
+			}
+		}
+		if onlyderp {
+			derpid := int(ep.derpAddr.Port())
+			active, ok := c.activeDerp[derpid]
+			if !ok {
+				c.goDerpConnect(derpid)
+				c.logf("magicsock: prepare fallback derp to %v at %v", ep.discoShort, derpid)
+			} else {
+				*active.lastWrite = time.Now()
+			}
+		}
+	}
+}
+
+
 // goDerpConnect starts a goroutine to start connecting to the given
 // DERP node.
 //
diff --git a/wgengine/magicsock/magicsock.go b/wgengine/magicsock/magicsock.go
index e42688602..bdec07d32 100644
--- a/wgengine/magicsock/magicsock.go
+++ b/wgengine/magicsock/magicsock.go
@@ -1650,6 +1650,26 @@ func (c *Conn) enqueueCallMeMaybe(derpAddr netip.AddrPort, de *endpoint) {
 		return
 	}
 
+	// Ignore endpoints from isolated peers.
+	if len(de.endpointState) == 0 {
+		// derp not initialized yet, so	no endpoints
+		return
+	}
+
+	if len(de.endpointState) <= 2 {
+		// derp connected, so the only endpoint is derp
+		onlyderp := true
+		for addr := range de.endpointState {
+			if addr.Addr() != tailcfg.DerpMagicIPAddr {
+				onlyderp = false
+				break
+			}
+		}
+		if onlyderp {
+			return
+		}
+	}
+
 	eps := make([]netip.AddrPort, 0, len(c.lastEndpoints))
 	for _, ep := range c.lastEndpoints {
 		eps = append(eps, ep.Addr)
@@ -1956,6 +1976,7 @@ func (c *Conn) SetNetworkMap(nm *netmap.NetworkMap) {
 				oldDiscoKey = epDisco.key
 			}
 			ep.updateFromNode(n, flags.heartbeatDisabled, flags.probeUDPLifetimeOn)
+			c.prepareFallbackDERP(ep)
 			c.peerMap.upsertEndpoint(ep, oldDiscoKey) // maybe update discokey mappings in peerMap
 			continue
 		}
diff --git a/wgengine/wgcfg/nmcfg/nmcfg.go b/wgengine/wgcfg/nmcfg/nmcfg.go
index 885d507fa..e50db61db 100644
--- a/wgengine/wgcfg/nmcfg/nmcfg.go
+++ b/wgengine/wgcfg/nmcfg/nmcfg.go
@@ -100,6 +100,11 @@ func WGCfg(nm *netmap.NetworkMap, logf logger.Logf, flags netmap.WGConfigFlags,
 		didExitNodeWarn := false
 		cpeer.V4MasqAddr = peer.SelfNodeV4MasqAddrForThisPeer()
 		cpeer.V6MasqAddr = peer.SelfNodeV6MasqAddrForThisPeer()
+		var localIps []netip.Addr
+		for i := range nm.SelfNode.Endpoints().LenIter() {
+			ep := nm.SelfNode.Endpoints().At(i)
+			localIps = append(localIps, ep.Addr())
+		}
 		for i := range peer.AllowedIPs().LenIter() {
 			allowedIP := peer.AllowedIPs().At(i)
 			if allowedIP.Bits() == 0 && peer.StableID() != exitNode {
@@ -126,6 +131,21 @@ func WGCfg(nm *netmap.NetworkMap, logf logger.Logf, flags netmap.WGConfigFlags,
 					}
 					fmt.Fprintf(skippedSubnets, "%v from %q (%v)", allowedIP, nodeDebugName(peer), peer.Key().ShortString())
 					continue
+				} else if (flags & netmap.AllowLocalRoutes) == 0 {
+					ignoreRoute := false
+					for _, localIP := range localIps {
+						if allowedIP.Contains(localIP) {
+							ignoreRoute = true
+							break
+						}
+					}
+					if ignoreRoute {
+						if skippedSubnets.Len() > 0 {
+							skippedSubnets.WriteString(", ")
+						}
+						fmt.Fprintf(skippedSubnets, "%v (localip) from %q (%v)", allowedIP, nodeDebugName(peer), peer.Key().ShortString())
+						continue
+					}
 				}
 			}
 			cpeer.AllowedIPs = append(cpeer.AllowedIPs, allowedIP)
